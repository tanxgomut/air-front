import { object, string, number, array, boolean } from 'yup'
import { useForm, useField } from 'vee-validate'
import airTypedefault from '@/_mockApis/pages/booking';


export const useBookingForm = (airTypeItem: any[]) => {
  const { t } = useI18n()
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏£‡πå
  const airType = ref<any[]>([...airTypeItem])
  const slips = ref<{ file: File; preview: string } | null>(null)
  const imagesBooking = ref<{ file: File; preview: string }[]>([])
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á schema
  const schema = object({
    name: string().required(t('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠')),
    tel: string()
      .required('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£')
       .matches(/^0[689]\d{8}$/, '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'),
    address: string().required('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà'),
    date: string().required('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'),
    time: string().required('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤'),
    selectedLocation: string().required('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà'),
    airType: array()
      .of(
        object({
          selected: boolean().required(),
          sum: number().required(),
        })
      )
      .test(
        'at-least-one-selected-with-sum',
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏£‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0',
        (value) => {
          return Array.isArray(value) && value.some(item => item.selected && item.sum > 0)
        }
      ),
  })

  const { handleSubmit, errors, meta, setFieldValue, validate, resetForm } = useForm({
    validationSchema: schema,
    initialValues: {
      name: '',
      tel: '',
      address: '',
      airType: airType.value,
      date: null,
      time: '',
      selectedLocation: '',
    },
  })

  // ‡πÉ‡∏ä‡πâ useField ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö binding ‡∏Å‡∏±‡∏ö <v-model>
  const { value: name } = useField<string>('name')
  const { value: tel } = useField<string>('tel')
  const { value: address } = useField<string>('address')
  const { value: date } = useField<string | null>('date')
  const { value: time } = useField<string>('time')
  const { value: selectedLocation } = useField<string>('selectedLocation')

  // sync airType ‡∏Å‡∏±‡∏ö form
  watch(airType, (val) => {
    setFieldValue('airType', val)
  }, { deep: true }
  )

  const resetBooking = () => {
    imagesBooking.value = []
    airType.value = airTypedefault.airTypedefault
    console.log(airTypedefault.airTypedefault);
    
    resetForm()
  }

  // ‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° validate
  const validBookingAir = handleSubmit(() => true, () => false)

  // ‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
  const submitBookingAir = handleSubmit((formData) => {
    const completeData = {
      ...formData,
      slips: slips.value,
      iamges: imagesBooking.value
    }
    console.log('üì¶ Booking Data:', completeData)
  })

  return {
    name,
    tel,
    address,
    date,
    time,
    selectedLocation,
    slips,
    imagesBooking,
    airType,
    errors,
    meta,
    submitBookingAir,
    validate,
    validBookingAir,
    resetBooking
  }
}
